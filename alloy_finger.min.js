/**
 * Minified by jsDelivr using UglifyJS v3.4.4.
 * Original file: /npm/alloyfinger@0.1.16/alloy_finger.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
! function() {
    function p(t) {
        return Math.sqrt(t.x * t.x + t.y * t.y)
    }

    function c(t, e) {
        var i, s, h = function(t, e) {
            var i = p(t) * p(e);
            if (0 === i) return 0;
            var s, h, n = (h = e, ((s = t).x * h.x + s.y * h.y) / i);
            return 1 < n && (n = 1), Math.acos(n)
        }(t, e);
        return s = e, 0 < (i = t).x * s.y - s.x * i.y && (h *= -1), 180 * h / Math.PI
    }
    var s = function(t) {
        this.handlers = [], this.el = t
    };

    function h(t, e) {
        var i = new s(t);
        return i.add(e), i
    }
    s.prototype.add = function(t) {
        this.handlers.push(t)
    }, s.prototype.del = function(t) {
        t || (this.handlers = []);
        for (var e = this.handlers.length; 0 <= e; e--) this.handlers[e] === t && this.handlers.splice(e, 1)
    }, s.prototype.dispatch = function() {
        for (var t = 0, e = this.handlers.length; t < e; t++) {
            var i = this.handlers[t];
            "function" == typeof i && i.apply(this.el, arguments)
        }
    };
    var t = function(t, e) {
        this.element = "string" == typeof t ? document.querySelector(t) : t, this.start = this.start.bind(this), this.move = this.move.bind(this), this.end = this.end.bind(this), this.cancel = this.cancel.bind(this), this.element.addEventListener("touchstart", this.start, !1), this.element.addEventListener("touchmove", this.move, !1), this.element.addEventListener("touchend", this.end, !1), this.element.addEventListener("touchcancel", this.cancel, !1), this.preV = {
            x: null,
            y: null
        }, this.pinchStartLen = null, this.zoom = 1, this.isDoubleTap = !1;
        var i = function() {};
        this.rotate = h(this.element, e.rotate || i), this.touchStart = h(this.element, e.touchStart || i), this.multipointStart = h(this.element, e.multipointStart || i), this.multipointEnd = h(this.element, e.multipointEnd || i), this.pinch = h(this.element, e.pinch || i), this.swipe = h(this.element, e.swipe || i), this.tap = h(this.element, e.tap || i), this.doubleTap = h(this.element, e.doubleTap || i), this.longTap = h(this.element, e.longTap || i), this.singleTap = h(this.element, e.singleTap || i), this.pressMove = h(this.element, e.pressMove || i), this.twoFingerPressMove = h(this.element, e.twoFingerPressMove || i), this.touchMove = h(this.element, e.touchMove || i), this.touchEnd = h(this.element, e.touchEnd || i), this.touchCancel = h(this.element, e.touchCancel || i), this._cancelAllHandler = this.cancelAll.bind(this), window.addEventListener("scroll", this._cancelAllHandler), this.delta = null, this.last = null, this.now = null, this.tapTimeout = null, this.singleTapTimeout = null, this.longTapTimeout = null, this.swipeTimeout = null, this.x1 = this.x2 = this.y1 = this.y2 = null, this.preTapPosition = {
            x: null,
            y: null
        }
    };
    t.prototype = {
        start: function(t) {
            if (t.touches) {
                this.now = Date.now(), this.x1 = t.touches[0].pageX, this.y1 = t.touches[0].pageY, this.delta = this.now - (this.last || this.now), this.touchStart.dispatch(t, this.element), null !== this.preTapPosition.x && (this.isDoubleTap = 0 < this.delta && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30, this.isDoubleTap && clearTimeout(this.singleTapTimeout)), this.preTapPosition.x = this.x1, this.preTapPosition.y = this.y1, this.last = this.now;
                var e = this.preV;
                if (1 < t.touches.length) {
                    this._cancelLongTap(), this._cancelSingleTap();
                    var i = {
                        x: t.touches[1].pageX - this.x1,
                        y: t.touches[1].pageY - this.y1
                    };
                    e.x = i.x, e.y = i.y, this.pinchStartLen = p(e), this.multipointStart.dispatch(t, this.element)
                }
                this._preventTap = !1, this.longTapTimeout = setTimeout(function() {
                    this.longTap.dispatch(t, this.element), this._preventTap = !0
                }.bind(this), 750)
            }
        },
        move: function(t) {
            if (t.touches) {
                var e = this.preV,
                    i = t.touches.length,
                    s = t.touches[0].pageX,
                    h = t.touches[0].pageY;
                if (this.isDoubleTap = !1, 1 < i) {
                    var n = t.touches[1].pageX,
                        o = t.touches[1].pageY,
                        l = {
                            x: t.touches[1].pageX - s,
                            y: t.touches[1].pageY - h
                        };
                    null !== e.x && (0 < this.pinchStartLen && (t.zoom = p(l) / this.pinchStartLen, this.pinch.dispatch(t, this.element)), t.angle = c(l, e), this.rotate.dispatch(t, this.element)), e.x = l.x, e.y = l.y, null !== this.x2 && null !== this.sx2 ? (t.deltaX = (s - this.x2 + n - this.sx2) / 2, t.deltaY = (h - this.y2 + o - this.sy2) / 2) : (t.deltaX = 0, t.deltaY = 0), this.twoFingerPressMove.dispatch(t, this.element), this.sx2 = n, this.sy2 = o
                } else {
                    if (null !== this.x2) {
                        t.deltaX = s - this.x2, t.deltaY = h - this.y2;
                        var a = Math.abs(this.x1 - this.x2),
                            u = Math.abs(this.y1 - this.y2);
                        (10 < a || 10 < u) && (this._preventTap = !0)
                    } else t.deltaX = 0, t.deltaY = 0;
                    this.pressMove.dispatch(t, this.element)
                }
                this.touchMove.dispatch(t, this.element), this._cancelLongTap(), this.x2 = s, this.y2 = h, 1 < i && t.preventDefault()
            }
        },
        end: function(t) {
            if (t.changedTouches) {
                this._cancelLongTap();
                var e = this;
                t.touches.length < 2 && (this.multipointEnd.dispatch(t, this.element), this.sx2 = this.sy2 = null), this.x2 && 30 < Math.abs(this.x1 - this.x2) || this.y2 && 30 < Math.abs(this.y1 - this.y2) ? (t.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2), this.swipeTimeout = setTimeout(function() {
                    e.swipe.dispatch(t, e.element)
                }, 0)) : (this.tapTimeout = setTimeout(function() {
                    e._preventTap || e.tap.dispatch(t, e.element), e.isDoubleTap && (e.doubleTap.dispatch(t, e.element), e.isDoubleTap = !1)
                }, 0), e.isDoubleTap || (e.singleTapTimeout = setTimeout(function() {
                    e.singleTap.dispatch(t, e.element)
                }, 250))), this.touchEnd.dispatch(t, this.element), this.preV.x = 0, this.preV.y = 0, this.zoom = 1, this.pinchStartLen = null, this.x1 = this.x2 = this.y1 = this.y2 = null
            }
        },
        cancelAll: function() {
            this._preventTap = !0, clearTimeout(this.singleTapTimeout), clearTimeout(this.tapTimeout), clearTimeout(this.longTapTimeout), clearTimeout(this.swipeTimeout)
        },
        cancel: function(t) {
            this.cancelAll(), this.touchCancel.dispatch(t, this.element)
        },
        _cancelLongTap: function() {
            clearTimeout(this.longTapTimeout)
        },
        _cancelSingleTap: function() {
            clearTimeout(this.singleTapTimeout)
        },
        _swipeDirection: function(t, e, i, s) {
            return Math.abs(t - e) >= Math.abs(i - s) ? 0 < t - e ? "Left" : "Right" : 0 < i - s ? "Up" : "Down"
        },
        on: function(t, e) {
            this[t] && this[t].add(e)
        },
        off: function(t, e) {
            this[t] && this[t].del(e)
        },
        destroy: function() {
            return this.singleTapTimeout && clearTimeout(this.singleTapTimeout), this.tapTimeout && clearTimeout(this.tapTimeout), this.longTapTimeout && clearTimeout(this.longTapTimeout), this.swipeTimeout && clearTimeout(this.swipeTimeout), this.element.removeEventListener("touchstart", this.start), this.element.removeEventListener("touchmove", this.move), this.element.removeEventListener("touchend", this.end), this.element.removeEventListener("touchcancel", this.cancel), this.rotate.del(), this.touchStart.del(), this.multipointStart.del(), this.multipointEnd.del(), this.pinch.del(), this.swipe.del(), this.tap.del(), this.doubleTap.del(), this.longTap.del(), this.singleTap.del(), this.pressMove.del(), this.twoFingerPressMove.del(), this.touchMove.del(), this.touchEnd.del(), this.touchCancel.del(), this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null, window.removeEventListener("scroll", this._cancelAllHandler), null
        }
    }, "undefined" != typeof module && "object" == typeof exports ? module.exports = t : window.AlloyFinger = t
}();
//# sourceMappingURL=/sm/fb69d224ee7cc138b8c1d05f341ab949fb795528ded1c28ab3b852e8cafae990.map